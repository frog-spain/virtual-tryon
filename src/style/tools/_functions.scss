// replace substring with another string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// Convert a hex value to comma-delimited rgb values
// In: #000
// Out: 0,0,0
@function derive-rgb-values-from-hex($hex) {
  @return red($hex), green($hex), blue($hex);
}

@function get-color-from-map($value) {
  @if (str-index(unquote("#{$value}"), 'var(')) {
    $value: str-replace($value, 'var(');
    $value: str-replace($value, ')');
  }

  @return map-get($colors-map, $value);
}

// Añade una variable CSS de tipo color junto a sus versiones light y dark
@mixin add-color($name, $value, $addShadows: false) {
  @if (str-index(unquote("#{$value}"), 'var(')) {
    $value: str-replace($value, 'var(');
    $value: str-replace($value, ')');

    $value: map-get($colors-map, $value);
  }

  $namergb: $name + '-rgb';
  $valuergb: derive-rgb-values-from-hex($value);

  $colors-map: map-merge($colors-map, ($name: $value)) !global;
  $colors-map: map-merge($colors-map, ($namergb: $valuergb)) !global;

  :root {
    #{$name}: #{$value};
    #{$namergb}: #{$valuergb};
  }

  @if ($addShadows) {
    $colors-map: map-merge($colors-map, (#{$name}-100: lighten($value, 50%))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-200: lighten($value, 30%))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-300: lighten($value, 20%))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-400: lighten($value, 8%))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-600: darken($value, 10%))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-700: darken($value, 20%))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-800: darken($value, 30%))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-900: darken($value, 40%))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-100-rgb: derive-rgb-values-from-hex(lighten($value, 50%)))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-200-rgb: derive-rgb-values-from-hex(lighten($value, 30%)))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-300-rgb: derive-rgb-values-from-hex(lighten($value, 20%)))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-400-rgb: derive-rgb-values-from-hex(lighten($value, 8%)))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-600-rgb: derive-rgb-values-from-hex(darken($value, 10%)))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-700-rgb: derive-rgb-values-from-hex(darken($value, 20%)))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-800-rgb: derive-rgb-values-from-hex(darken($value, 30%)))) !global;
    $colors-map: map-merge($colors-map, (#{$name}-900-rgb: derive-rgb-values-from-hex(darken($value, 40%)))) !global;

    :root {
      #{$name}-100: #{lighten($value, 50%)};
      #{$name}-200: #{lighten($value, 30%)};
      #{$name}-300: #{lighten($value, 20%)};
      #{$name}-400: #{lighten($value, 8%)};
      #{$name}-600: #{darken($value, 10%)};
      #{$name}-700: #{darken($value, 20%)};
      #{$name}-800: #{darken($value, 30%)};
      #{$name}-900: #{darken($value, 40%)};
      #{$name}-100-rgb: #{derive-rgb-values-from-hex(lighten($value, 50%))};
      #{$name}-200-rgb: #{derive-rgb-values-from-hex(lighten($value, 30%))};
      #{$name}-300-rgb: #{derive-rgb-values-from-hex(lighten($value, 20%))};
      #{$name}-400-rgb: #{derive-rgb-values-from-hex(lighten($value, 8%))};
      #{$name}-600-rgb: #{derive-rgb-values-from-hex(darken($value, 10%))};
      #{$name}-700-rgb: #{derive-rgb-values-from-hex(darken($value, 20%))};
      #{$name}-800-rgb: #{derive-rgb-values-from-hex(darken($value, 30%))};
      #{$name}-900-rgb: #{derive-rgb-values-from-hex(darken($value, 40%))};
    }
  }
}

// Devuelve el valor alternativo de un color
@function get-color($value, $shade: null) {
  @if (str-index(unquote("#{$value}"), 'var(')) {
    $value: str-replace($value, 'var(');
    $value: str-replace($value, ')');
  }

  @if ($shade == null) {
    @return var(#{$value});
  } @else {
    @return var(#{$value + '-' + $shade});
  }
}

// Devuelve un múltiplo del --space-default
@function space-mult($value) {
  @return #{calc(var(--space-default) * #{$value})};
}
